class Solution {
public:
    
    
    
    void dfs(vector<vector<char>>& grid, int i, int j)
    {
        grid[i][j] = '0';
        
        if(i+1 >= 0 && i+1 < grid.size() && j >= 0 && j < grid[i+1].size() && grid[i+1][j] == '1')
            dfs(grid, i+1, j);
        if(i >= 0 && i < grid.size() && j+1 >= 0 && j+1 < grid[i].size() && grid[i][j+1] == '1')
            dfs(grid, i, j+1);
        if(i-1 >= 0 && i-1 < grid.size() && j >= 0 && j < grid[i-1].size() && grid[i-1][j] == '1')
            dfs(grid, i-1, j);
         if(i >= 0 && i < grid.size() && j-1 >= 0 && j-1 < grid[i].size() && grid[i][j-1] == '1')
            dfs(grid, i, j-1);
        
    }
        
        
    int numIslands(vector<vector<char>>& grid) 
    {
        int numLands = 0;
        for(int i=0; i < grid.size() ; i++)
        {
            for(int j=0; j < grid[i].size() ; j++)
            {
                if( grid[i][j] == '1')
                {
                    dfs(grid,i,j);
                    numLands++;
                }
            }
        }
        return numLands;
    }
};
